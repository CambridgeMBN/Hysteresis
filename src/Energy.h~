/*
 * Energy.h
 *
 *  Created on: 12 Feb 2015
 *      Author: sriv1211
 */

#ifndef ENERGY_H_
#define ENERGY_H_

#include <vector>
#include <iterator>

#include "TwoLayers.h"

class Energy {
private:
	TwoLayers stack;
	std::vector<double>::iterator it;

	double getIteratorEnergy(std::vector<double>::iterator it) {}

public:
	Energy(TwoLayers &stack) : stack(stack) {}

	void getPhi() {
		Element *top = stack.top;
		Element *bottom = stack.bottom;

		std::vector<double> topPhiList = top->getPhiList();
		std::vector<double> bottomPhiList = bottom->getPhiList();

		if (top->getTopBias() > 1e-6) {
			it = topPhiList.begin();
			std::cout << "bias " << std::endl;
		} else {
			it = topPhiList.begin() + 1;
			std::cout << "no bias " << std::endl;
		}

		for (it; it != topPhiList.end(); it++) {
			auto phiPrev = std::prev(it);
			auto phiNext = std::next(it);

			if (it != topPhiList.begin()) {
				std::cout << "prev: " << *phiPrev;
			} else {
				std::cout << "bias";
			}

			std::cout << " value: " << *it;

			if (it != topPhiList.end() - 1) {
				std::cout << " next: " << *phiNext;
			} else {
				std::cout << " exchange: " << *bottomPhiList.begin();
			}

			std::cout << std::endl;
		}

		std::cout << " --- " << std::endl;

		for (it = bottomPhiList.begin(); it != bottomPhiList.end() - 1; it++) {
			auto phiPrev = std::prev(it);
			auto phiNext = std::next(it);

			if (it != bottomPhiList.begin()) {
				std::cout << "prev: " << *phiPrev;
			} else {
				std::cout << " exchange: " << *(topPhiList.end() -1);
			}

			std::cout << " i: " << *it;

			if (it != bottomPhiList.end() - 1) {
				std::cout << " next: " << *phiNext << std::endl;
			}
		}
	}


//	virtual ~Energy();

};

#endif /* ENERGY_H_ */
